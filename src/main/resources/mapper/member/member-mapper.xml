<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.app.member.repository.MemberRepository">
  <!-- 
  <insert id="insertMember">
  	insert into
  		member
  	values (
  		#{memberId}, #{password}, #{name}, #{birthday}, #{email}, default
  	)
  </insert> 
  -->
  
  <!-- 
  <select id="loadUserByUsername" resultMap="memberAuthMap">
  	select
  		*
  	from
  		member
  	where 
  		member_id = #{username}
  </select>
  collection/association태그 사용시 나머지 컬럼에 대한 id/result태그 생략 불가
  <resultMap type="memberDetails" id="memberAuthMap">
  	<id column="member_id" property="memberId"/>
  	<result column="password" property="password"/>
  	<result column="name" property="name"/>
  	<result column="birthday" property="birthday"/>
  	<result column="email" property="email"/>
  	<result column="created_at" property="createdAt"/>
  	collection 1:N관계의 테이블 조회시 사용
  	<collection 
  		property="authorities"
  		column="member_id"
  		ofType="simpleGrantedAuthority"
  		select="findAuthorities"></collection>
  </resultMap>
  
  
  <select id="findAuthorities" resultMap="simpleGrantedAuthorityMap">
  	select
  		*
  	from
  		authority
  	where
  		member_id = #{member_id}
  </select>
  
  <resultMap type="simpleGrantedAuthority" id="simpleGrantedAuthorityMap">
  	<constructor>
  		<arg column="auth" javaType="string"/>
  	</constructor>
  </resultMap> 
  -->
 
  <select id="loadUserByUsername" resultMap="memberAuthMap">
	select
	    *
	from 
	    member M
	  left join authority A
	    on M.member_id = A.member_id
	where 
	    M.member_id = #{username}
  </select>


  <!-- collection태그를 사용할때 result태그는 생략할 수 없다. -->
  <resultMap id="memberAuthMap" type="memberDetails">
      <id column="member_id" property="memberId"/>
      <result column="member_pwd" property="memberPwd"/>
      <result column="member_name" property="memberName"/>
      <result column="member_phone" property="memberPhone"/>
      <result column="member_email" property="memberEmail"/>
      <result column="birthday" property="birthday"/>
      <collection property="authorities"
                  ofType="simpleGrantedAuthority">
          <constructor>
              <!-- javaType 필수 -->
              <arg column="auth" javaType="string"/>
          </constructor>
      </collection>
  </resultMap>
	  
	  <select id="findByMemberInfo" resultMap="findByMemberInfoMap">
	  select 
	    m.member_id, c.curriculum_name, mt.member_name, c.class_id, 
	    s.curriculum_id, c.curriculum_start_at, c.curriculum_end_at, c.teacher_id, mc.board_id
	  from member m left outer join student s
	    on m.member_id = s.student_id
	                left outer join curriculum c
	    on s.curriculum_id = c.curriculum_id
	                left outer join member mt
	    on c.teacher_id = mt.member_id
                    left outer join myclass mc
        on mc.curriculum_id = c.curriculum_id
	  where m.member_id = #{studentId}
	</select>
  


 <resultMap id="findByMemberInfoMap" type="StudentMypageInfoDto">
      <id column="member_id" property="studentId"/>
      <result column="curriculum_name" property="curriculumName"/>
      <result column="member_name" property="memberName"/>
      <result column="class_id" property="classId"/>
      <result column="curriculum_start_at" property="curriculumStartAt"/>
      <result column="curriculum_end_at" property="curriculumEndAt"/>
      <result column="curriculum_id" property="curriculumId"/>
      <result column="teacher_id" property="teacherId"/>
      <result column="board_id" property="boardId"/>
     
    <!--   <collection property="authorities"
                  ofType="simpleGrantedAuthority">
          <constructor>
              javaType 필수
              <arg column="auth" javaType="string"/>
          </constructor>
      </collection> -->
  </resultMap>
  
 <select id="findByEmployeeInfo" resultMap="findByEmployeeInfoMap">
 select 
     m.member_id, m.member_name, c.class_id, c.subject, c.curriculum_name, a.auth, 
     e.job_code, e.employee_id, c.curriculum_id, c.curriculum_start_at, c.curriculum_end_at, mc.board_id
 from
      member m left outer join curriculum c
             on  c.teacher_id = m.member_id
     right outer join  authority a 
            on m.member_id = a.member_id 
     left outer join employee e 
            on employee_id = m.member_id
     left outer join myclass mc
            on mc.curriculum_id = c.curriculum_id
  where	
	m.member_id = #{memberId} and mc.board_id is not null
</select>

<resultMap id="findByEmployeeInfoMap" type="EmployeeInfoDto">
      <id column="member_id" property="memberId"/>
      <id column="employee_id" property="employeeId"/>
      <result column="member_name" property="memberName"/>
      <result column="class_id" property="classId"/>
      <result column="subject" property="subject"/>
      <result column="curriculum_name" property="curriculumName"/>
      <result column="auth" property="auth"/>
      <result column="job_code" property="jobCode"/>
      <result column="curriculum_id" property="curriculumId"/>
      <result column="curriculum_start_at" property="curriculumStartAt"/>
      <result column="curriculum_end_at" property="curriculumEndAt"/>
      <result column="board_id" property="boardId"/>
  </resultMap>
  
  
  
 <select id="findEmployeeById" resultMap="findEmployeeByIdMap">
 	select 
    	m.member_id, m.member_name, a.auth, e.job_code, e.employee_enroll_date
 	from
		member m left outer join employee e 
 			on e.employee_id = m.member_id
	 	right outer join  authority a 
			on m.member_id = a.member_id 
 	where e.employee_id= #{memberId}
 </select>

 <resultMap id="findEmployeeByIdMap" type="EmployeeDto">
      <id column="member_id" property="memberId"/>
      <result column="member_name" property="memberName"/>
      <result column="auth" property="auth"/>
      <result column="job_code" property="jobCode"/>
      <result column="employee_enroll_date" property="employeeEnrollDate"/>
  </resultMap>
  
  
  
  <select id="findAllVacationApproveList" >
  select  
 	 	 m.member_name, v.vacation_id, v.student_id,  v.vacation_start_date, v.vacation_end_date, v.teacher_id, v.vacation_send_date,va.vacation_renamed_filename, v.vacation_approve_check
  from vacation v join vacation_attachment va 
		on v.vacation_id = va.vacation_id 
				  join member m on m.member_id = v.student_id
  where teacher_id = #{teacherId} and v.vacation_approve_check = 1
  </select>

</mapper>